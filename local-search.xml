<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>车辆攻击方式记录</title>
    <link href="/2023/09/09/%E8%BD%A6%E8%BE%86%E6%94%BB%E5%87%BB%E6%96%B9%E5%BC%8F%E8%AE%B0%E5%BD%95/"/>
    <url>/2023/09/09/%E8%BD%A6%E8%BE%86%E6%94%BB%E5%87%BB%E6%96%B9%E5%BC%8F%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h1 id="利用NFCGate中继远程开锁"><a href="#利用NFCGate中继远程开锁" class="headerlink" title="利用NFCGate中继远程开锁"></a>利用NFCGate中继远程开锁</h1><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>需要设备，两台root的手机（安卓）</p><p>项目地址：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Shell">https://github.com/nfcgate/server<br>https://github.com/nfcgate/nfcgate<br>https://github.com/nfcgate/nfcgate/releases<br></code></pre></td></tr></table></figure><h2 id="启动服务端"><a href="#启动服务端" class="headerlink" title="启动服务端"></a>启动服务端</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Shell">git clone https://github.com/nfcgate/server<br>cd server<br>python server.py<br></code></pre></td></tr></table></figure><p><img src="/2023/09/09/%E8%BD%A6%E8%BE%86%E6%94%BB%E5%87%BB%E6%96%B9%E5%BC%8F%E8%AE%B0%E5%BD%95/1c1f840fb41f400d5abda8bbfe4de3c0_MD5.jpg"></p><h2 id="安装app"><a href="#安装app" class="headerlink" title="安装app"></a>安装app</h2><p>下载地址：<a href="https://github.com/nfcgate/nfcgate/releases">https://github.com/nfcgate/nfcgate/releases</a></p><p>配置连接服务端，Hostname为启动server.py的IP，Port默认为5566：</p><p><img src="/2023/09/09/%E8%BD%A6%E8%BE%86%E6%94%BB%E5%87%BB%E6%96%B9%E5%BC%8F%E8%AE%B0%E5%BD%95/abb87051d61eb1ab971d1ea8745723e8_MD5.jpg"></p><h2 id="模式选择"><a href="#模式选择" class="headerlink" title="模式选择"></a>模式选择</h2><p>选择中继模式，接触卡片的手机选择Reader，接触车辆的手机选择Tag：</p><p><img src="/(4be43e006fa4dae50fc087a3608df37d_MD5.jpg"></p><h2 id="可能碰到的问题"><a href="#可能碰到的问题" class="headerlink" title="可能碰到的问题"></a>可能碰到的问题</h2><p>移步lsp，启用模块，勾选系统框架，重启：</p><p><img src="/2023/09/09/%E8%BD%A6%E8%BE%86%E6%94%BB%E5%87%BB%E6%96%B9%E5%BC%8F%E8%AE%B0%E5%BD%95/b34266e8d067e26da52ee2260cd78852_MD5.jpg"></p><h1 id="对钥匙进行重放，远程开启车钥匙"><a href="#对钥匙进行重放，远程开启车钥匙" class="headerlink" title="对钥匙进行重放，远程开启车钥匙"></a>对钥匙进行重放，远程开启车钥匙</h1><h2 id="安装hackrf"><a href="#安装hackrf" class="headerlink" title="安装hackrf"></a>安装hackrf</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">Linux安装</span><br>sudo apt-get install hackrf<br><span class="hljs-meta prompt_"># </span><span class="language-bash">Mac安装</span><br>brew install hackrf<br></code></pre></td></tr></table></figure><p>使用方法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs Bash">hackrf_info    <span class="hljs-comment"># 查看 Hack RF 连接信息</span><br>hackrf_transfer    <span class="hljs-comment"># 基于文件进行发送和接收 SDR</span><br>hackrf_transfer -h    <span class="hljs-comment"># 查看 hackrf_transfer 帮助信息</span><br><br><span class="hljs-comment"># 录制信号</span><br><span class="hljs-comment"># -r：将数据存储到文件中</span><br><span class="hljs-comment"># -f：中心频率，单位 Hz</span><br><span class="hljs-comment"># -s：采样率，单位 Hz（4/8/10/12.5/16/20 MHz，默认 10 MHz）</span><br><span class="hljs-comment"># -n：采样数量（默认值是无限的）</span><br><span class="hljs-comment"># -a：设置功放（1 表示开启，0 表示关闭）</span><br><span class="hljs-comment"># -g：设置 Rx VGA 增益（0 到 62 dB 之间，每次增加 2 dB）</span><br><span class="hljs-comment"># -l：设置 Rx LNA 增益（0 到 40 dB 之间，每次增加 8 dB）</span><br>hackrf_transfer -r capture.raw -f 315000000 -l 8/16/24 -g 20/40 [-s 2000000 -n 10000000 -a 1]<br><br><span class="hljs-comment"># 重放信号</span><br><span class="hljs-comment"># -t：从文件中读取数据</span><br><span class="hljs-comment"># -x：设置 Tx VGA 增益（0 到 47 dB 之间，每次增加 1 dB）</span><br><span class="hljs-comment"># -R：重复发送模式（默认为关闭）</span><br>hackrf_transfer -t capture.raw -f 315000000 -x 40 [-s 2000000 -a 1]<br></code></pre></td></tr></table></figure><h2 id="一、确定信号频率。"><a href="#一、确定信号频率。" class="headerlink" title="一、确定信号频率。"></a>一、确定信号频率。</h2><p>打开Gqrx（<a href="https://github.com/gqrx-sdr/gqrx">https://github.com/gqrx-sdr/gqrx</a>），调到430左右（一般遥控频率），打开设备，观察波形，找到频率变化最大的峰值，确定具体频率，经测试我电车的遥控器频率为435100kHZ。</p><blockquote><p>建议直接下载打包好的：<a href="https://github.com/gqrx-sdr/gqrx/releases/tag/v2.16">https://github.com/gqrx-sdr/gqrx/releases/tag/v2.16</a></p><p><img src="/2023/09/09/%E8%BD%A6%E8%BE%86%E6%94%BB%E5%87%BB%E6%96%B9%E5%BC%8F%E8%AE%B0%E5%BD%95/1bcb6db50c8a9361a21ae6722203425d_MD5.jpg"></p></blockquote><p><img src="/2023/09/09/%E8%BD%A6%E8%BE%86%E6%94%BB%E5%87%BB%E6%96%B9%E5%BC%8F%E8%AE%B0%E5%BD%95/799e5bfa43c0fe0974486bb686632eae_MD5.jpg"></p><h2 id="二、录制信号"><a href="#二、录制信号" class="headerlink" title="二、录制信号"></a>二、录制信号</h2><p>使用指令进行信号录制并存入文件，-r为写入文件，dian.raw即为录制的文件名；-f为采样频率；-g 为RX VGA(baseband) gain；-i为TX LAN(F) gain。-g -l用来进行信号放大。运行后对准天线按下遥控器，可以多按几下，然后crl+c停止录制。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Shell">hackrf_transfer -r dian.raw -f 435100000 -g 16 -l 32<br></code></pre></td></tr></table></figure><p><img src="/2023/09/09/%E8%BD%A6%E8%BE%86%E6%94%BB%E5%87%BB%E6%96%B9%E5%BC%8F%E8%AE%B0%E5%BD%95/1e24c900581e63c16eeccfbc2dbd2e05_MD5.jpg"></p><h2 id="三、重放信号"><a href="#三、重放信号" class="headerlink" title="三、重放信号"></a>三、重放信号</h2><p>录制完毕并存入文件后，使用下述指令进行重放，重放的文件就是刚刚录制的。-t用来制定文件；-×为TX VGA (IF) gain 放大信号。重放时天线对准电车，即可实现车辆解锁。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Shell">hackrf_transfer -t dian.raw -f 435100000 -x 47<br></code></pre></td></tr></table></figure><p><img src="/2023/09/09/%E8%BD%A6%E8%BE%86%E6%94%BB%E5%87%BB%E6%96%B9%E5%BC%8F%E8%AE%B0%E5%BD%95/cdca9531d2047965b68d41d359acecd6_MD5.jpg"></p><h1 id="GPS欺骗"><a href="#GPS欺骗" class="headerlink" title="GPS欺骗"></a>GPS欺骗</h1><h2 id="使用hackrf-one进行GPS欺骗"><a href="#使用hackrf-one进行GPS欺骗" class="headerlink" title="使用hackrf one进行GPS欺骗"></a>使用hackrf one进行GPS欺骗</h2><p>下载GPS星历</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Plaintext">http://www.igs.gnsswhu.cn/index.php/home/data_product/igs.html<br></code></pre></td></tr></table></figure><h2 id="进行二进制转换"><a href="#进行二进制转换" class="headerlink" title="进行二进制转换"></a>进行二进制转换</h2><p>工具地址：<a href="https://github.com/osqzss/gps-sdr-sim">https://github.com/osqzss/gps-sdr-sim</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">./gps-sdr-sim -e  /root/桌面/gps/brdc3100.21n  -l  29.6562801500,91.1257504400  -b 8 -o /root/桌面/gps/xx.bin<br></code></pre></td></tr></table></figure><h2 id="发送欺骗信号"><a href="#发送欺骗信号" class="headerlink" title="发送欺骗信号"></a>发送欺骗信号</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Bash">hackrf_transfer -t xx.bin -f 1575420000 -s 2600000 -a 1 -x 20 -R<br><br>-t 文件名，从文件传输数据（刚刚生成的二进制文件）<br>-f 频率赫兹 1575420000民用频段（一般不需要改）<br>-s采样速率2.6Msps（一般不需要改）<br>-a 放大器使能，接收/发射射频放大器 1 =使能，0 =禁用<br>-R 重复发射模式<br>-x 增益分贝，TX VGA(中频)增益，0-47分贝，1dB步长<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>车联网</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IOT安全-QEMU使用</title>
    <link href="/2023/08/23/IOT%E5%AE%89%E5%85%A8-QEMU%E4%BD%BF%E7%94%A8/"/>
    <url>/2023/08/23/IOT%E5%AE%89%E5%85%A8-QEMU%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p><a href="https://www.qemu.org/">QEMU</a>是一套由<a href="https://baike.baidu.com/item/%E6%B3%95%E5%B8%83%E9%87%8C%E6%96%AF%C2%B7%E8%B4%9D%E6%8B%89/9358492?fromModule=lemma_inlink">法布里斯·贝拉</a>(Fabrice Bellard)所编写的以GPL许可证分发源码的模拟处理器软件，在<a href="https://baike.baidu.com/item/GNU%2FLinux/7061928?fromModule=lemma_inlink">GNU/Linux</a>平台上使用广泛。<a href="https://baike.baidu.com/item/Bochs?fromModule=lemma_inlink">Bochs</a>，<a href="https://baike.baidu.com/item/PearPC/6612429?fromModule=lemma_inlink">PearPC</a>等与其类似，但不具备其许多特性，比如高速度及跨平台的特性，通过<a href="https://baike.baidu.com/item/KQEMU?fromModule=lemma_inlink">KQEMU</a>这个<a href="https://baike.baidu.com/item/%E9%97%AD%E6%BA%90/4000869?fromModule=lemma_inlink">闭源</a>的加速器，QEMU能模拟至接近真实电脑的速度。</p><p>根据冯诺依曼结构，一个计算机可分为：</p><ul><li>运算器</li><li>控制器</li><li>存储器</li><li>输入设备</li><li>输出设备</li></ul><p>固件下载：<a href="https://people.debian.org/~aurel32/qemu/">https://people.debian.org/~aurel32/qemu/</a></p><p>命令大全：<a href="https://wiki.qemu.org/Documentation/Platforms">https://wiki.qemu.org/Documentation/Platforms</a></p><h2 id="快速安装使用"><a href="#快速安装使用" class="headerlink" title="快速安装使用"></a>快速安装使用</h2><p>如何快速的安装一个IOT测试环境镜像呢？Github上有比较方便的FAT（<a href="https://github.com/attify/firmware-analysis-toolkit"><em>Firmware</em> <em>Analysis</em> Toolkit </a>）框架可以一键式启动一个镜像供使用方便我们进行漏洞研究，但很长时间我都没有把它给安装好（网友说需要科学上网，还未进行尝试），所以既然反正需要折腾，那就干脆直接折腾QEMU好了。</p><p>基础命令：</p><ul><li>-m 指定内存大小</li><li>-M 指定虚拟机器「machine」的类型</li><li>-cpu 指定虚拟CPU的型号</li><li>-smp 指定对称多处理的核心数</li><li>-append 指定内核启动时使用的命令行参数「cmdline」</li></ul><h3 id="创建存储器"><a href="#创建存储器" class="headerlink" title="创建存储器"></a>创建存储器</h3><p>创建一个16G的虚拟磁盘文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">qemu-img create -f qcow2 drive 16G<br></code></pre></td></tr></table></figure><h3 id="虚拟硬件环境"><a href="#虚拟硬件环境" class="headerlink" title="虚拟硬件环境"></a>虚拟硬件环境</h3><ul><li>运算器、控制器 -&gt; CPU、各种加速器*</li><li>输入、输出设备 -&gt; 网卡、CXL设备等</li></ul><p>QEMU本身没有像VMware那样的GUI配置界面，所有配置通过命令行参数指定</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">qemu-system-x86_64 -machine q35 \<br>-smp 4,sockets=1,cores=4,threads=1 \<br>-m 4096<br></code></pre></td></tr></table></figure><p>现在启动了一个机型为q35，处理器<code>sockets</code>1插槽<code>cores</code>4核<code>threads</code>4线程，<code>-m</code>内存4096MB，使用默认网络配置的虚拟机，由于没有启动盘，并不会启动某个系统</p><h3 id="利用虚拟硬件环境启动系统"><a href="#利用虚拟硬件环境启动系统" class="headerlink" title="利用虚拟硬件环境启动系统"></a>利用虚拟硬件环境启动系统</h3><p>我们已经有了一块硬盘<code>drive</code>作为启动盘，指定给虚拟环境：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">qemu-system-x86_64 -machine q35 \<br>-smp 4,sockets=1,cores=4,threads=1 \<br>-m 4096 \<br>-drive file=drive<br></code></pre></td></tr></table></figure><p>会发现，指定后并没有什么区别，是因为这个“硬盘”我们没有给它“安装”系统</p><h3 id="安装系统"><a href="#安装系统" class="headerlink" title="安装系统"></a>安装系统</h3><p>参考为物理机安装系统：</p><ul><li>物理机硬盘 -&gt; 虚拟磁盘文件<code>drive</code></li><li>安装媒介（写入了镜像的U盘） -&gt; 系统镜像文件</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">qemu-system-x86_64 -machine q35 \<br>-smp 4,sockets=1,cores=4,threads=1 \<br>-m 4096 \<br>-drive file=drive \<br>-drive file=&lt;系统镜像，如ubuntu-22.04.2-live-server-amd64.iso&gt;,media=cdrom<br></code></pre></td></tr></table></figure><p>按照ISO文件的引导进行安装即可，完成后可移除ISO文件重启</p><h3 id="案例：模拟一个固件-CVE-2023-20073"><a href="#案例：模拟一个固件-CVE-2023-20073" class="headerlink" title="案例：模拟一个固件 CVE-2023-20073"></a>案例：模拟一个固件 CVE-2023-20073</h3><h4 id="下载固件"><a href="#下载固件" class="headerlink" title="下载固件"></a>下载固件</h4><ul><li><p>官网途径</p></li><li><p>设备中提取（后续补充）</p></li><li><p>大佬分享（github等平台大佬的分享）</p></li></ul><p><a href="https://software.cisco.com/download/home/286287791/type/282465789/release/1.0.03.29">https://software.cisco.com/download/home/286287791/type/282465789/release/1.0.03.29</a></p><blockquote><p>引用：<a href="https://cyan-io.github.io/posts/2023-07-30-qemu-quickstart/">https://cyan-io.github.io/posts/2023-07-30-qemu-quickstart/</a></p></blockquote><h2 id="疑难症"><a href="#疑难症" class="headerlink" title="疑难症"></a>疑难症</h2><p><img src="/2023/08/23/IOT%E5%AE%89%E5%85%A8-QEMU%E4%BD%BF%E7%94%A8/20230823145502.png"></p>]]></content>
    
    
    
    <tags>
      
      <tag>IOT</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>网络安全面试题</title>
    <link href="/2023/07/07/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <url>/2023/07/07/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h2 id="网络安全面试题"><a href="#网络安全面试题" class="headerlink" title="网络安全面试题"></a>网络安全面试题</h2><h3 id="必会题型「渗透」"><a href="#必会题型「渗透」" class="headerlink" title="必会题型「渗透」"></a>必会题型「渗透」</h3><ul><li><p>请说一下渗透测试的流程</p></li><li><p>请简单例举几个你熟悉的漏洞</p><ul><li>xss<ul><li>过滤，实体化编码，HttpOnly</li></ul></li><li>sql注入</li><li>文件上传</li></ul></li><li><p>说一说shiro反序列化产生的原因</p><ul><li>xxx</li></ul></li><li><p>如何挖掘更多的子域名</p></li><li><p>如何绕过CNS查找真实IP</p></li><li><p>Mysql注入和Sqlserver注入的区别</p></li><li><p>Mysql注入版本的区别</p><ul><li>5.4以上有一个information表「存各个数据库表、字段等信息」</li></ul></li><li><p>注入如何写shell</p></li><li><p>Sqlerver的提权</p><ul><li>执行系统命令，<code>EXEC xp_cmdshell \&#39;whoami&#39;</code></li></ul></li><li><p>Mysql的udf提权</p><ul><li>udf提权</li><li>mof提权</li><li>开机启动脚本提权（启动项提权）</li></ul></li><li><h2 id="SSRF等到原理以及一般存在点"><a href="#SSRF等到原理以及一般存在点" class="headerlink" title="SSRF等到原理以及一般存在点"></a>SSRF等到原理以及一般存在点</h2></li><li><p>SSRF如何利用</p></li><li><p>ssrf配合redis getshell过程 几种方式</p></li><li><p>ssrf配合redis getshell，利用的协议是什么</p></li><li><p>ssrf漏洞的修复</p></li><li><p>xxe的漏洞的原理，利用协议，以及存在点，如何利用</p></li><li><p>Oracle注入，以及Oracle数据库的提权利用(看版本)</p></li></ul><h3 id="进阶题「内网」"><a href="#进阶题「内网」" class="headerlink" title="进阶题「内网」"></a>进阶题「内网」</h3><ul><li>获取到webshell，但是目标机器不出网如何深入利用</li><li>DNS隧道的原理，以及DNS有几种模式，DNS隧道中继模式的原理</li><li>如何利用CS搭建dns隧道</li><li>跨域攻击的几种方式</li><li>Windows系统抓取明文密码的区别</li><li>内网中如何进行密码爆破</li><li>如何判断机器是否出网</li><li>如何进行hash传递攻击</li><li>为什么后来废弃了psexec工具</li><li>为什么有的账号进行hash传递会失败(SID=500)</li><li>SPN扫描</li><li>Kerberoast攻击的几种方式</li><li>当前用户在线，但是没有明文，如何登录桌面(除了影子用户)</li><li>如何抓取明文密码和Hash(考虑免杀问题，除了mimikatz免杀的另一种方法)</li><li>委派攻击的原理</li><li>如何防御哈希传递攻击(重点在于某个补丁KB2871997)</li><li>Linux下的日志清理，以及操作记录清理</li><li>mimikatz抓取明文密码的原理</li><li>如何建立sockks代理的几种方式</li><li>为什么要用socks5代理而不用socks4，获取代理之后，我们如何将本机的工具代理进去</li><li>域内攻击的几种手法(MS16-068,……)</li></ul><p>每个问题自己主动展开讲：</p><ul><li>漏洞<ul><li>漏洞产生原因</li><li>漏洞的分类</li><li>漏洞出现的地方</li><li>漏洞利用方式</li><li>漏洞如何防御</li></ul></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>APP杀手-frida</title>
    <link href="/2022/04/13/APP%E6%9D%80%E6%89%8B-frida/"/>
    <url>/2022/04/13/APP%E6%9D%80%E6%89%8B-frida/</url>
    
    <content type="html"><![CDATA[<h1 id="APP克星系列"><a href="#APP克星系列" class="headerlink" title="APP克星系列"></a>APP克星系列</h1><h2 id="安卓平台"><a href="#安卓平台" class="headerlink" title="安卓平台"></a>安卓平台</h2><h3 id="安卓「服务端-手机」frida使用环境配置（一）"><a href="#安卓「服务端-手机」frida使用环境配置（一）" class="headerlink" title="安卓「服务端-手机」frida使用环境配置（一）"></a>安卓「服务端-手机」frida使用环境配置（一）</h3><h4 id="简单的hook实践"><a href="#简单的hook实践" class="headerlink" title="简单的hook实践"></a>简单的hook实践</h4><p>下载</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">选择合适的版本下载</span><br>https://github.com/frida/frida/releases<br></code></pre></td></tr></table></figure><p> 如何知道合适的版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">查看安卓机芯片架构</span><br>adb shell getprop ro.product.cpu.abi<br></code></pre></td></tr></table></figure><p>安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">把frida-server 放到 安卓的/data/local/tmp/目录</span><br>adb push frida-server /data/local/tmp/<br></code></pre></td></tr></table></figure><p>安卓端启动frida服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">进入超级权限</span><br>su<br><span class="hljs-meta prompt_"># </span><span class="language-bash">给予可执行权限</span><br>chmod +x /data/local/tmp/frida-server<br><span class="hljs-meta prompt_"># </span><span class="language-bash">启动frida服务端</span><br>/data/local/tmp/frida-server<br></code></pre></td></tr></table></figure><p>实验demo</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"># hello-frida.<span class="hljs-property">js</span><br><br><span class="hljs-built_in">setTimeout</span>(<br><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-title class_">Java</span>.<span class="hljs-title function_">perform</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;hello frida!&quot;</span>)<br>&#125;)<br>&#125;<br>)<br></code></pre></td></tr></table></figure><p>测试demo，使用命令执行进行hook操作</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs awk">➜  z frida -U -l hello-frida.js 师傅端<br>     ____<br>    / _  |   Frida <span class="hljs-number">15.1</span>.<span class="hljs-number">28</span> - A world-class dynamic instrumentation toolkit<br>   | (_| |<br>    &gt; _  |   Commands:<br>   <span class="hljs-regexp">/_/</span> |_|       help      -&gt; Displays the help system<br>   . . . .       object?   -&gt; Display information about <span class="hljs-string">&#x27;object&#x27;</span><br>   . . . .       <span class="hljs-keyword">exit</span>/quit -&gt; Exit<br>   . . . .<br>   . . . .   More info at https:<span class="hljs-regexp">//</span>frida.re<span class="hljs-regexp">/docs/</span>home/<br>   . . . .<br>   . . . .   Connected to Android Emulator <span class="hljs-number">5554</span> (id=emulator-<span class="hljs-number">5554</span>)<br>Attaching...                                                            <br>hello frida!<br>[Android Emulator <span class="hljs-number">5554</span>::师傅端 ]-&gt;<br></code></pre></td></tr></table></figure><h2 id="IOS平台"><a href="#IOS平台" class="headerlink" title="IOS平台"></a>IOS平台</h2><h2 id="工具拓展"><a href="#工具拓展" class="headerlink" title="工具拓展"></a>工具拓展</h2><blockquote><p>Frida下载地址：<a href="https://github.com/frida/frida/releases">https://github.com/frida/frida/releases</a></p><p>frida-ios-dump：<a href="https://github.com/AloneMonkey/frida-ios-dump">https://github.com/AloneMonkey/frida-ios-dump</a></p></blockquote><h2 id="adb常用命令拓展"><a href="#adb常用命令拓展" class="headerlink" title="adb常用命令拓展"></a>adb常用命令拓展</h2><p>* 查看设备</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">adb devices</span><br></code></pre></td></tr></table></figure><p>ps这个命令是查看当前连接的设备, 连接到计算机的android设备或者模拟器将会列出显示</p><p>若有多台安卓设备，可以通过在adb后面加上 -s &lt;设备id&gt; 对指定设备进行装包、卸载等操作</p><p>*启动adb</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">adb <span class="hljs-keyword">start</span>-<span class="hljs-keyword">server</span><br></code></pre></td></tr></table></figure><p>*关闭adb</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta">adb kill-<span class="hljs-keyword">server</span><br></code></pre></td></tr></table></figure><p>* 安装软件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">adb install <span class="hljs-tag">&lt;<span class="hljs-name">apk文件路径</span>&gt;</span><br></code></pre></td></tr></table></figure><p>* 卸载软件 </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">adb uninstall <span class="hljs-tag">&lt;<span class="hljs-name">应用进程名</span>&gt;</span><br></code></pre></td></tr></table></figure><p>*卸载app但保留数据和缓存文件</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">adb uninstall -k&lt;<span class="hljs-keyword">package</span>&gt;<br></code></pre></td></tr></table></figure><p>*重新启动设别</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">adb reboot</span><br></code></pre></td></tr></table></figure><p>*重启到bootloader，即刷机模式</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">adb reboot bootloader</span><br></code></pre></td></tr></table></figure><p>*重启到recovery，即恢复模式</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">adb reboot recovery</span><br></code></pre></td></tr></table></figure><p>*从电脑上发送文件到设备</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">adb <span class="hljs-keyword">push</span> &lt;本地路径&gt; &lt;远程路径&gt;<br><span class="hljs-symbol">ps:</span> 用<span class="hljs-keyword">push</span>命令可以把本机电脑上的文件或者文件夹复制到设备(手机)<br></code></pre></td></tr></table></figure><p>*从设备上下载文件到电脑</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml">adb pull <span class="hljs-tag">&lt;<span class="hljs-name">远程路径</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">本地路径</span>&gt;</span><br>ps: 用pull命令可以把设备(手机)上的文件或者文件夹复制到本机电脑<br></code></pre></td></tr></table></figure><p>*取得设备root权限</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">adb remount</span><br></code></pre></td></tr></table></figure><p>*登录设备shell</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vim">adb <span class="hljs-keyword">shell</span><br>adb <span class="hljs-keyword">shell</span> &lt;<span class="hljs-keyword">command</span>命令&gt;<br><span class="hljs-keyword">ps</span>: adb <span class="hljs-keyword">shell</span> 后面加的是linux系统操作指令，也即直接运行设备命令, 相当于执行远程命令<br></code></pre></td></tr></table></figure><p>*使用adb命令对手机进行截屏并拷贝到电脑</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">adb shell <span class="hljs-regexp">/system/</span>bin<span class="hljs-regexp">/screencap -p /</span>sdcard/screenshot.png（保存到手机）<br>adb pull <span class="hljs-regexp">/sdcard/</span>screenshot.png d:/screenshot.png（拷贝到电脑）<br></code></pre></td></tr></table></figure><p>*输出当前servers信息</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">adb <span class="hljs-keyword">shell</span><span class="language-bash"> dumpsys </span><br></code></pre></td></tr></table></figure><p>ps: 输出信息的开始部分就是所有运行的service</p><p>-查询到运行的system service后，就可以在dumpsys后面加上service的名字，查看指定的service信息。</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable">adb</span> <span class="hljs-variable">shell</span> <span class="hljs-variable">dumpsys</span> <span class="hljs-variable">activity</span><br><span class="hljs-variable">adb</span> <span class="hljs-variable">shell</span> <span class="hljs-variable">dumpsys</span> <span class="hljs-function"><span class="hljs-title">cpuinfo</span>(<span class="hljs-variable">CPU</span>)</span><br><span class="hljs-variable">adb</span> <span class="hljs-variable">shell</span> <span class="hljs-variable">dumpsys</span> <span class="hljs-function"><span class="hljs-title">batterystate</span>(电池)</span><br><span class="hljs-variable">adb</span> <span class="hljs-variable">shell</span> <span class="hljs-variable">dumpsys</span> <span class="hljs-function"><span class="hljs-title">window</span>(分辨率)</span><br></code></pre></td></tr></table></figure><p>*检测手机运行时间</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">adb <span class="hljs-keyword">shell</span><span class="language-bash"> <span class="hljs-built_in">uptime</span></span><br></code></pre></td></tr></table></figure><p>*查看logcat日志</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">adb logcat -v time-s <span class="hljs-keyword">tag</span> <span class="hljs-title">&gt; xxx</span>.log<br></code></pre></td></tr></table></figure><p>ps: 其中-v time使输出的日志带时间信息，-s用于通过tag过滤日志（也可以通过管道grep过滤），&gt; 使保存到本地文件。若直接在终端查看日志，则不加。</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vim">adb logcat | <span class="hljs-keyword">grep</span> &lt;正则表达式&gt;<br><span class="hljs-keyword">ps</span>: <span class="hljs-keyword">grep</span>后为正则表达式<br>adb logcat | <span class="hljs-keyword">grep</span> &lt;正则表达式&gt; | tee xxx.<span class="hljs-built_in">log</span><br><span class="hljs-keyword">ps</span>:使用 tee可以实现同时在终端输出且保存到文件<br></code></pre></td></tr></table></figure><p>*强制杀死进程</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gauss">adb <span class="hljs-built_in">shell</span> amforce-<span class="hljs-keyword">stop</span> &lt;进程名&gt;<br></code></pre></td></tr></table></figure><p>*启动指定Activity</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">adb <span class="hljs-keyword">shell</span> <span class="hljs-keyword">am</span> start-n &lt;进程名&gt; /<span class="hljs-symbol">&lt;Acitvity&gt;</span><br></code></pre></td></tr></table></figure><p>*开关wifi</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">adb <span class="hljs-keyword">shell</span><span class="language-bash"> svc wifienable <span class="hljs-comment">#打开wifi</span></span><br>adb <span class="hljs-keyword">shell</span><span class="language-bash"> svc wifidisable <span class="hljs-comment">#关闭wifi</span></span><br></code></pre></td></tr></table></figure><p>*查看wifi密码</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">adb shell cat<span class="hljs-regexp">/data/mi</span>sc<span class="hljs-regexp">/wifi/</span>*.conf<br></code></pre></td></tr></table></figure><p>*获取序列号</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">adb <span class="hljs-keyword">get</span>-serialno<br></code></pre></td></tr></table></figure><p>*查看设备cpu和内存占用情况</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coq">adb shell <span class="hljs-built_in">top</span><br></code></pre></td></tr></table></figure><p>*查看占用内存前6的app</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">adb</span> shell top -m <span class="hljs-number">6</span><br></code></pre></td></tr></table></figure><p>*刷新一次内存信息，然后返回</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">adb</span> shell top -n <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>*查询各进程内存使用情况</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">adb <span class="hljs-keyword">shell</span><span class="language-bash"> procrank</span><br></code></pre></td></tr></table></figure><p>*杀死一个进程</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">adb <span class="hljs-keyword">shell</span><span class="language-bash"> <span class="hljs-built_in">kill</span>[pid]</span><br></code></pre></td></tr></table></figure><p>*查看进程列表</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">adb <span class="hljs-keyword">shell</span> <span class="hljs-keyword">ps</span><br></code></pre></td></tr></table></figure><p>*查看指定进程状态</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">adb <span class="hljs-keyword">shell</span> <span class="hljs-keyword">ps</span> -<span class="hljs-keyword">x</span>[PID]<br></code></pre></td></tr></table></figure><p>*查看后台services信息</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">adb <span class="hljs-keyword">shell</span><span class="language-bash"> servicelist</span><br></code></pre></td></tr></table></figure><p>*查看当前内存占用</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">adb <span class="hljs-keyword">shell</span><span class="language-bash"> <span class="hljs-built_in">cat</span>/proc/meminfo</span><br></code></pre></td></tr></table></figure><p>*查看IO内存分区</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">adb <span class="hljs-keyword">shell</span><span class="language-bash"> <span class="hljs-built_in">cat</span>/proc/iomem</span><br></code></pre></td></tr></table></figure><p>*重命名文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">adb shell rename <span class="hljs-tag">&lt;<span class="hljs-name">原文件名</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">修改后文件名</span>&gt;</span><br></code></pre></td></tr></table></figure><p>*删除system/avi.apk</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">adb <span class="hljs-keyword">shell</span><span class="language-bash"> <span class="hljs-built_in">rm</span>/system/avi.apk</span><br></code></pre></td></tr></table></figure><p>*删除文件夹及其下面所有文件</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">adb <span class="hljs-keyword">shell</span><span class="language-bash"> <span class="hljs-built_in">rm</span> -r&lt;文件夹&gt;</span><br></code></pre></td></tr></table></figure><p>*移动文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">adb shell mv <span class="hljs-tag">&lt;<span class="hljs-name">原文件路径</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">移动后文件路径</span>&gt;</span><br></code></pre></td></tr></table></figure><p>*设置文件权限</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">adb <span class="hljs-keyword">shell</span><span class="language-bash"> <span class="hljs-built_in">chmod</span> 777&lt;文件&gt;</span><br></code></pre></td></tr></table></figure><p>*新建文件夹</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">adb <span class="hljs-keyword">shell</span><span class="language-bash"> mkdirpath/foldelname</span><br></code></pre></td></tr></table></figure><p>*查看文件内容</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata">adb <span class="hljs-keyword">shell</span> <span class="hljs-keyword">cat</span>&lt;<span class="hljs-keyword">file</span>&gt;<br></code></pre></td></tr></table></figure><p>*清除log缓存</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">adb logcat -c</span><br></code></pre></td></tr></table></figure><p>*查看bug报告</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elm"><span class="hljs-title">adb</span> bugre<span class="hljs-keyword">port</span> <br></code></pre></td></tr></table></figure><p>*获取设备名称</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">adb <span class="hljs-keyword">shell</span><span class="language-bash"> <span class="hljs-built_in">cat</span>/system/build.prop</span><br></code></pre></td></tr></table></figure><p>*查看ADB帮助</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">adb <span class="hljs-built_in">help</span><br></code></pre></td></tr></table></figure><p>*跑monkey</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">adb shell monkey -v-p <span class="hljs-tag">&lt;<span class="hljs-name">进程名</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">次数</span>&gt;</span><br></code></pre></td></tr></table></figure><p>*当adb 显示端口被占用，拒绝访问时的处理办法：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs perl">adb nodaemon server//查看哪个端口被占用<br>netstat -ano |findstr <span class="hljs-string">&quot;&lt;端口号&gt;&quot;</span> //提示占用该端口的进程（非<span class="hljs-number">0</span>地址）<br>（下面步骤可省略，可通过任务管理器杀死）<br>tasklist /fi “PIDe<span class="hljs-string">q &lt;进程号&gt;</span>”//通过pid查看所有进程<br>taskkill /pid &lt;进程号&gt; <span class="hljs-regexp">/f/</span>/杀死进程<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>APP逆向</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>I am Cha111Ng1</title>
    <link href="/2020/04/11/I-am-Cha111Ng1/"/>
    <url>/2020/04/11/I-am-Cha111Ng1/</url>
    
    <content type="html"><![CDATA[<p><img src="/2020/04/11/I-am-Cha111Ng1/image-20230412223013886.png" alt="image-20230412223013886"></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
